// Code generated by MockGen. DO NOT EDIT.
// Source: drivers/multidriver/multidriver.go

// Package mock_multidriver is a generated GoMock package.
package mock_multidriver

import (
	context "context"
	io "io"
	reflect "reflect"

	driver "github.com/distribution/distribution/v3/registry/storage/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockMultiDriver is a mock of MultiDriver interface.
type MockMultiDriver struct {
	ctrl     *gomock.Controller
	recorder *MockMultiDriverMockRecorder
}

// MockMultiDriverMockRecorder is the mock recorder for MockMultiDriver.
type MockMultiDriverMockRecorder struct {
	mock *MockMultiDriver
}

// NewMockMultiDriver creates a new mock instance.
func NewMockMultiDriver(ctrl *gomock.Controller) *MockMultiDriver {
	mock := &MockMultiDriver{ctrl: ctrl}
	mock.recorder = &MockMultiDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiDriver) EXPECT() *MockMultiDriverMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockMultiDriver) Delete(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMultiDriverMockRecorder) Delete(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMultiDriver)(nil).Delete), ctx, path)
}

// GetContent mocks base method.
func (m *MockMultiDriver) GetContent(ctx context.Context, path string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", ctx, path)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockMultiDriverMockRecorder) GetContent(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockMultiDriver)(nil).GetContent), ctx, path)
}

// List mocks base method.
func (m *MockMultiDriver) List(ctx context.Context, path string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, path)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMultiDriverMockRecorder) List(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMultiDriver)(nil).List), ctx, path)
}

// Move mocks base method.
func (m *MockMultiDriver) Move(ctx context.Context, sourcePath, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", ctx, sourcePath, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockMultiDriverMockRecorder) Move(ctx, sourcePath, destPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockMultiDriver)(nil).Move), ctx, sourcePath, destPath)
}

// Name mocks base method.
func (m *MockMultiDriver) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockMultiDriverMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockMultiDriver)(nil).Name))
}

// PutContent mocks base method.
func (m *MockMultiDriver) PutContent(ctx context.Context, path string, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContent", ctx, path, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutContent indicates an expected call of PutContent.
func (mr *MockMultiDriverMockRecorder) PutContent(ctx, path, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContent", reflect.TypeOf((*MockMultiDriver)(nil).PutContent), ctx, path, content)
}

// Reader mocks base method.
func (m *MockMultiDriver) Reader(ctx context.Context, path string, offset int64) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader", ctx, path, offset)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockMultiDriverMockRecorder) Reader(ctx, path, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockMultiDriver)(nil).Reader), ctx, path, offset)
}

// ReplicateInPrimary mocks base method.
func (m *MockMultiDriver) ReplicateInPrimary(contentPath string) (driver.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicateInPrimary", contentPath)
	ret0, _ := ret[0].(driver.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicateInPrimary indicates an expected call of ReplicateInPrimary.
func (mr *MockMultiDriverMockRecorder) ReplicateInPrimary(contentPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicateInPrimary", reflect.TypeOf((*MockMultiDriver)(nil).ReplicateInPrimary), contentPath)
}

// ReplicateInSecondary mocks base method.
func (m *MockMultiDriver) ReplicateInSecondary(contentPath string) (driver.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplicateInSecondary", contentPath)
	ret0, _ := ret[0].(driver.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReplicateInSecondary indicates an expected call of ReplicateInSecondary.
func (mr *MockMultiDriverMockRecorder) ReplicateInSecondary(contentPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplicateInSecondary", reflect.TypeOf((*MockMultiDriver)(nil).ReplicateInSecondary), contentPath)
}

// Stat mocks base method.
func (m *MockMultiDriver) Stat(ctx context.Context, path string) (driver.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", ctx, path)
	ret0, _ := ret[0].(driver.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockMultiDriverMockRecorder) Stat(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockMultiDriver)(nil).Stat), ctx, path)
}

// URLFor mocks base method.
func (m *MockMultiDriver) URLFor(ctx context.Context, path string, options map[string]interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "URLFor", ctx, path, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// URLFor indicates an expected call of URLFor.
func (mr *MockMultiDriverMockRecorder) URLFor(ctx, path, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "URLFor", reflect.TypeOf((*MockMultiDriver)(nil).URLFor), ctx, path, options)
}

// Walk mocks base method.
func (m *MockMultiDriver) Walk(ctx context.Context, path string, f driver.WalkFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Walk", ctx, path, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk.
func (mr *MockMultiDriverMockRecorder) Walk(ctx, path, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockMultiDriver)(nil).Walk), ctx, path, f)
}

// Writer mocks base method.
func (m *MockMultiDriver) Writer(ctx context.Context, path string, append bool) (driver.FileWriter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Writer", ctx, path, append)
	ret0, _ := ret[0].(driver.FileWriter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Writer indicates an expected call of Writer.
func (mr *MockMultiDriverMockRecorder) Writer(ctx, path, append interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Writer", reflect.TypeOf((*MockMultiDriver)(nil).Writer), ctx, path, append)
}
